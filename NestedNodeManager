class Elem {
    Id?: number;
    Type?: string;
    Children?: Elem[];
    Parent?: Elem;

    constructor(id: number, tp: string) {
        this.Id = id;
        this.Type = tp;
        this.Children = [];
    }
    static Create(id: number, type:String){
        return new Elem(id, type);
    }
    
    /*this will find the item with id and then add the element after it as the next sibling */
    InsertChildAfter(el: Elem, id:number){
        var parent = this.FindParentForId(id);
        if (!parent) return;

        const index = parent?.Children?.findIndex(child => child.Id === id) ?? -1;

        if (index !== -1) {
            el.Parent = this;
            parent.Children?.splice(index + 1, 0, el);
        }        
    }

    /*This will append an item to the children of the element with specific id*/
    AddChildToElement(el: Elem, id:number){
        var parent = this.FindParentForId(id);
        if (!parent) return;

        el.Parent = this;
        parent.Children?.push(el);
    }

    /*this will find the item with id and then add the element before it as the previous sibling */
    InsertChildBefore(el: Elem, id:number){
           var parent = this.FindParentForId(id);
        if (!parent) return;

        const index = parent.Children?.findIndex(child => child.Id === id) ??-1;

        if (index !== -1) {
                el.Parent = this;
                parent.Children?.splice(index, 0, el);
        }        
    }

    /*this will just add a child to the current elements children */
    AddChild(el: Elem): void {
        el.Parent = this;
        this.Children?.push(el);
    }

    /*this will find an element with the specific id either in the current element or any of it's siblings */
    FindById(id: number): Elem | null {
        if (this.Id === id) return this;
        if (this.Children && this.Children.length > 0) {
            for (var child of this.Children) {
                const found = child.FindById(id);
                if (found !== null) return found;
            }
        }
        return null;
    }

    /*this will search for a specific id in the current element or its children and return the parent element */
    FindParentForId(id: number, parent?: Elem): Elem | null {
        if (this.Id === id) return parent || null;
            for (var child of this.Children) {
                const found = child.FindParentForId(id, this);
                if (found !== null) return found;
            }
        return null;
    }


    /*converts the current objec to a json object */
    toJSON(): any {
        return {
            Id: this.Id,
            Type: this.Type,
            Children: this.Children?.map(child => child.toJSON()),
            ParentId: this.Parent?.Id ?? null
        };
    }

    Show(): void {
        console.log(this);
    }
}



class ElemSerializer {
    public static Serialize(elem: Elem): string {
        return JSON.stringify(elem.toJSON());
    }

    public static Deserialize(json: string): Elem {
        const parsedJson = JSON.parse(json);
        const root = new Elem(parsedJson.Id, parsedJson.Type);

        if (parsedJson.Children && parsedJson.Children.length > 0) {
            root.Children = parsedJson.Children.map((childJson: any) => ElemSerializer.LoadChild(childJson, root));
        }

        return root;
    }

    private static LoadChild(json: any, parent: Elem): Elem {
        const child = new Elem(json.Id, json.Type);

        if (json.Children && json.Children.length > 0) {
            child.Children = json.Children.map((childJson: any) => ElemSerializer.LoadChild(childJson, child));
        }

        child.Parent = parent;

        return child;
    }
}


var str = `{
  "Id": 1,
  "Type": "doc",
  "Children": [
    {
      "Id": 2,
      "Type": "div",
      "Children": [
        {
          "Id": 3,
          "Type": "txt",
          "Children": []
        }
      ]
    }
  ]
  } `
var doc1 = ElemSerializer.Deserialize(str);
doc1.Show();

var str = ElemSerializer.Serialize(doc1);
console.log(str);

const doc = Elem.Create(1, "doc");
const div = Elem.Create(2, "div");
const txt = Elem.Create(3, "txt");
div.AddChild(txt);
doc.AddChild(div);
doc.Show();

// Uncomment the following lines to test FindById
 const foundById = doc.FindById(3);
 console.log("Found by Id:", foundById);

doc.InsertChildAfter(new Elem(4, "table"), 3)
doc.Show();
//console.log(doc.toJSON())
