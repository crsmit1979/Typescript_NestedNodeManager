class Elem {
    Id: number;
    Type: string;
    Children?: Elem[];
    Parent?: Elem;

    constructor(id:number, type:string,children:Elem[] | null)
    {
        this.Id = id;
        this.Type = type;
        this.Children = children ?? [];
    }
    static Create(id: number, type:string): Elem{
        return new Elem(id, type, null);
    }
    Show(){
        console.log(this);
    }

    toJSON(): any {
        return {
            Id: this.Id,
            Type: this.Type,
            Children: this.Children?.map(child => child.toJSON()),
            ParentId: this.Parent?.Id ?? null
        };
    }
}

class TreeNode<T> {
    root: Elem | null = null;
    index : {[id:number]: Elem} = {};
    
    constructor(elem: Elem){
        this.root = elem;
        this.buildIndex(elem);
    }

    *[Symbol.iterator](): Iterator<Elem> {
        yield* this.iterateTree(this.root);
    }

    private buildIndex(node: Elem | null): void {
        if (node) {
            this.index[node.Id] = node;

            if (node.Children && node.Children.length > 0) {
                for (const child of node.Children) {
                    this.buildIndex(child);
                }
            }
        }
    }

    public FindById(id: number): Elem | null{
        return this.index[id];
    }

    private *iterateTree(node: Elem | null): IterableIterator<Elem> {
        if (node) {
            yield node;

            if (node.Children && node.Children.length > 0) {
                for (const child of node.Children) {
                    yield* this.iterateTree(child);
                }
            }
        }
    }

    AddChild(id: number, elem: Elem): void {
        const node = this.FindById(id);
        if (node) {
            elem.Parent = node;
            node.Children.push(elem);
            this.buildIndex(this.root);
        }
    }
    InsertBefore(id: number, elem: Elem){
        var node = this.FindById(id);
        if (node && node.Parent) {
            var parentNode = node.Parent;
            const index = parentNode.Children.indexOf(node);
            
            if (index !== -1) {
                parentNode.Children.splice(index, 0, elem);
                elem.Parent = parentNode;
                this.buildIndex(this.root);
            }
        }
    }
    InsertAfter(id: number, elem: Elem){
        var node = this.FindById(id);
        if (node && node.Parent) {
            var parentNode = node.Parent;
            const index = parentNode.Children.indexOf(node);
            
            if (index !== -1) {
                parentNode.Children.splice(index+1, 0, elem);
                elem.Parent = parentNode;
                this.buildIndex(this.root);
            }
        }
    }

    DeleteById(id: number): void {
        const nodeToDelete = this.FindById(id);

        if (nodeToDelete) {
            const parentNode = nodeToDelete.Parent;

            if (parentNode) {
                const indexInParent = parentNode.Children.indexOf(nodeToDelete);

                if (indexInParent !== -1) {
                    parentNode.Children.splice(indexInParent, 1); // Remove the node from parent's children array
                    this.buildIndex(this.root); // Rebuild the index
                }
            } else {
                // If the node to delete is the root
                this.root = null;
                this.index = {};
            }
        }
    }

    Show(){
        console.log(this.root)
    }
}

class ElemSerializer {
    public static Serialize(elem: Elem): string {
        return JSON.stringify(elem.toJSON());
    }

    public static Deserialize(json: string): Elem {
        const parsedJson = JSON.parse(json);
        const root = Elem.Create(parsedJson.Id, parsedJson.Type);

        if (parsedJson.Children && parsedJson.Children.length > 0) {
            root.Children = parsedJson.Children.map((childJson: any) => ElemSerializer.LoadChild(childJson, root));
        }

        return root;
    }

    private static LoadChild(json: any, parent: Elem): Elem {
        const child = new Elem(json.Id, json.Type);

        if (json.Children && json.Children.length > 0) {
            child.Children = json.Children.map((childJson: any) => ElemSerializer.LoadChild(childJson, child));
        }

        child.Parent = parent;

        return child;
    }

}


var str = `{
  "Id": 1,
  "Type": "doc",
  "Children": [
    {
      "Id": 2,
      "Type": "div",
      "Children": [
        {
          "Id": 3,
          "Type": "txt",
          "Children": []
        }
      ]
    }
  ]
  } `
var doc1 = ElemSerializer.Deserialize(str);
doc1.Show();

var tree = new TreeNode<Elem>(doc1);
var itm = tree.FindById(3);
tree.AddChild(3, Elem.Create(10,"AAAA"))
//tree.InsertBefore(10, Elem.Create(12,"BBBB"))
tree.InsertAfter(10, Elem.Create(12,"BBBB"))
tree.DeleteById(10);
tree.Show();
