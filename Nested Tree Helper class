class Elem {
    Id: number;
    Children: Elem[];

    constructor(id:number, children:Elem[]){
        this.Id = id;
        this.Children = children;
    }
}


class Helper {
    static Clone(el: Elem): Elem {
        var copy = {...el};
        return copy;
    }

    static FindById(el: Elem, id:number): Elem | null {
        const queue: Elem[] = [el];

        while (queue.length > 0) {
            const current = queue.shift()!;

            if (current.Id === id) {
                return current;
            }

            queue.push(...current.Children);
        }

        return null; 
    }
     static FindParentById(el: Elem, id: number): Elem | null {
        const queue: { node: Elem, parent: Elem | null }[] = [{ node: el, parent: null }];

        while (queue.length > 0) {
            const { node, parent } = queue.shift()!;

            if (node.Id === id) {
                return parent;
            }

            queue.push(...node.Children.map(child => ({ node: child, parent: node })));
        }

        return null;
    }
    static AddChild(el:Elem, id: number, newElem: Elem){
        var fnd = Helper.FindById(el, id);
        if (!fnd) {     
            throw new Error("Could not find element with id=" + fromId)
        }
        fnd.Children.push(newElem);
    }

      static DeleteById(el: Elem, id: number) {
        el.Children = el.Children.filter(child => {
            if (child.Id === id) {
                return false; // Exclude the element with the specified ID
            }

            Helper.DeleteById(child, id);
            return true; // Include other children
        });
    }

    static Insert(el: Elem, id: number, newElem: Elem, insertBefore: boolean) {
        const index = el.Children.findIndex(child => child.Id === id);

        if (index !== -1) {
            const position = insertBefore ? index : index + 1;
            el.Children.splice(position, 0, newElem);
        }

        el.Children.forEach(child => Helper.Insert(child, id, newElem, insertBefore));
    }    

    static Move(copy: Elem, fromId: number, toId: number, insertBefore: boolean) {
        var itemToDelete = Helper.FindById(copy, fromId)
        if (!itemToDelete) {
            throw new Error("Could not find element with id=" + fromId)
        } 
        var copyOfDelete = Helper.Clone(itemToDelete);
        Helper.DeleteById(copy, fromId);
        Helper.Insert(copy, toId, copyOfDelete, insertBefore);
    }

    private static findIndexById(el: Elem, id: number): number {
        return el.Children.findIndex(child => child.Id === id);
    }
}


var js = {
    Id:1,
    Type:"Doc",
    Children: [
        {
            Id: 2,
            Type: "text",
            Children:[
                {
                    Id: 3,
                    Type: "text",
                    Children:[]
                },

            ]
        }
    ]
}
var newJs = {
    Id: 999,
    Type:"div",
    Children: []
}
var el = js as Elem;
var copy = Helper.Clone(el);
//var fnd = Helper.FindById(copy, 2);
//Helper.AddChild(copy, 2, newJs as Elem)
//Helper.DeleteById(copy, 999);
//Helper.Insert(copy, 2,newJs as Elem, false)

//Helper.Move(copy, 3, 2, true)
//Helper.Move(copy, 2, 3, true)
var fnd = Helper.FindParentById(copy,  3);
console.log(fnd)
